package com.ragchat.chatservice.service;

import com.ragchat.chatservice.dto.ApiResponseDTO;
import com.ragchat.chatservice.dto.ChatSessionDTO;
import com.ragchat.chatservice.dto.MessageDTO;
import com.ragchat.chatservice.exception.ResourceNotFoundException;
import com.ragchat.chatservice.model.ChatMessage;
import com.ragchat.chatservice.model.ChatSession;
import com.ragchat.chatservice.repository.ChatMessageRepository;
import com.ragchat.chatservice.repository.ChatSessionRepository;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class ChatService {

    private static final Logger log = LoggerFactory.getLogger(ChatService.class);

    @Autowired
    private ChatSessionRepository chatSessionRepository;

    @Autowired
    private ChatMessageRepository chatMessageRepository;

    @Autowired
    private ModelMapper modelMapper;

    /**
     * Create a new chat session
     */
    public ApiResponseDTO createSession(ChatSessionDTO dto) {
        ChatSession session = modelMapper.map(dto, ChatSession.class);
        ChatSession saved = chatSessionRepository.saveAndFlush(session);
        ChatSessionDTO response = modelMapper.map(saved, ChatSessionDTO.class);
        log.info("✅ Session created for userId={}, sessionId={}", dto.getUserId(), saved.getId());
        return new ApiResponseDTO(200, "Session creation completed", response);
    }

    /**
     * Update session name or favorite status
     * - userId cannot be changed and must remain 6 digits
     * - name is mandatory
     * - updatedAt auto-generated by Hibernate
     */
    /**
     * Update session name or favorite status.
     * - userId cannot be changed and must be 6 digits
     * - if userId is missing in request, use existing one from DB
     * - name is mandatory for update
     * - updatedAt auto-managed by Hibernate
     */
    public ApiResponseDTO updateSession(UUID sessionId, ChatSessionDTO dto) {
        ChatSession session = chatSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("Session not found with id " + sessionId));

        // ✅ If userId not provided, use existing one
        String userIdToValidate = (dto.getUserId() != null) ? dto.getUserId() : session.getUserId();

        // ✅ Validate 6-digit userId
        if (userIdToValidate == null || !userIdToValidate.matches("\\d{6}")) {
            log.warn("Invalid userId format for sessionId={} (provided={})", sessionId, userIdToValidate);
            return new ApiResponseDTO(400, "Invalid userId — must be a 6-digit number", null);
        }

        // ✅ Prevent userId changes
        if (dto.getUserId() != null && !session.getUserId().equals(dto.getUserId())) {
            log.warn("Attempted to change userId for sessionId={} (existing={}, provided={})",
                    sessionId, session.getUserId(), dto.getUserId());
            return new ApiResponseDTO(400, "User ID cannot be changed for an existing session", null);
        }

        // ✅ Validate session name (mandatory)
        if (dto.getName() == null || dto.getName().trim().isEmpty()) {
            log.warn("Session name missing for update on sessionId={}", sessionId);
            return new ApiResponseDTO(400, "Session name is required for update", null);
        }

        // ✅ Update allowed fields only
        session.setName(dto.getName());
        session.setFavorite(dto.isFavorite());

        ChatSession saved = chatSessionRepository.save(session);
        ChatSessionDTO updated = modelMapper.map(saved, ChatSessionDTO.class);

        log.info("✏️ Updated session for sessionId={}, name='{}', favorite={}, userId={}",
                sessionId, dto.getName(), dto.isFavorite(), session.getUserId());

        return new ApiResponseDTO(200, "Session updated successfully", updated);
    }


    /**
     * Delete a session and its messages
     */
    @Transactional
    public ApiResponseDTO deleteSession(UUID sessionId) {
        ChatSession session = chatSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("Session not found with id " + sessionId));

        chatMessageRepository.deleteBySessionId(sessionId);
        chatSessionRepository.delete(session);

        log.info("🗑️ Deleted session and messages for sessionId={}", sessionId);
        return new ApiResponseDTO(200, "Session deleted successfully", null);
    }

    /**
     * Get session by ID
     */
    public ApiResponseDTO getSession(UUID sessionId) {
        ChatSession session = chatSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("Session not found with id " + sessionId));
        ChatSessionDTO dto = modelMapper.map(session, ChatSessionDTO.class);
        return new ApiResponseDTO(200, "Session fetched successfully", dto);
    }

    /**
     * Add message to a session
     */
    public ApiResponseDTO addMessage(UUID sessionId, MessageDTO dto) {
        chatSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("Session not found with id " + sessionId));

        ChatMessage message = modelMapper.map(dto, ChatMessage.class);
        message.setSessionId(sessionId);

        ChatMessage saved = chatMessageRepository.saveAndFlush(message);
        MessageDTO response = modelMapper.map(saved, MessageDTO.class);

        return new ApiResponseDTO(200, "Message added successfully", response);
    }

    /**
     * Get messages for a session (with pagination)
     */
    public ApiResponseDTO getMessages(UUID sessionId, int page, int size) {
        chatSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("Session not found with id " + sessionId));

        if (page > 0) page = page - 1; // Friendly 1-based pagination

        List<MessageDTO> messages = chatMessageRepository
                .findBySessionId(sessionId, PageRequest.of(page, size, Sort.by("createdAt").ascending()))
                .stream()
                .map(msg -> modelMapper.map(msg, MessageDTO.class))
                .collect(Collectors.toList());

        return new ApiResponseDTO(200, "Messages retrieved successfully", messages);
    }

    /**
     * Toggle favorite status
     */
    public ApiResponseDTO toggleFavorite(UUID sessionId) {
        ChatSession session = chatSessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("Session not found with id " + sessionId));

        session.setFavorite(!session.isFavorite());
        chatSessionRepository.save(session);

        ChatSessionDTO dto = modelMapper.map(session, ChatSessionDTO.class);
        return new ApiResponseDTO(200, "Favorite status toggled successfully", dto);
    }

    /**
     * Retrieves a ChatSessionDTO by session ID.
     * Returns null if not found.
     */
    public ChatSessionDTO getSessionById(UUID sessionId) {
        return chatSessionRepository.findById(sessionId)
                .map(session -> modelMapper.map(session, ChatSessionDTO.class))
                .orElse(null);
    }

}
